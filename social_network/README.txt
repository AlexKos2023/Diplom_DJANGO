Bспользованиe Django REST framework для создания API для социальной сети.

1. **Модели**:
   - Post: Модель поста, содержащая текст, изображение, дату создания и связь с автором.
   - Comment: Модель комментария, связанная с постом и автором, содержащая текст и дату создания.
   - Like: Модель лайка, связанная с постом и пользователем.

2. **ViewSets**:
   - PostViewSet: ViewSet для работы с постами. Реализует CRUD операции для постов, включая проверку авторства.
   - CommentViewSet: ViewSet для работы с комментариями. Реализует создание комментария к определенному посту.
   - LikeViewSet: ViewSet для работы с лайками. Реализует создание лайка для определенного поста, с проверкой на уже существующий лайк от пользователя.

3. **Permissions**:
   - IsAuthorOrReadOnly: Пользовательский класс разрешений, который позволяет только автору объекта изменять его.

4. **Сериализаторы**:
   - CommentSerializer: Сериализатор для комментариев.
   - PostSerializer: Сериализатор для постов, включая информацию о комментариях и количестве лайков.
   - LikeSerializer: Сериализатор для лайков, с проверкой на уже существующий лайк от пользователя при создании.

5. **Settings**:
    В данном файле настроек Django для проекта social_network были добавлены следующие настройки:

    Добавлены приложения в INSTALLED_APPS:
    - 'rest_framework': для работы с REST API
    - 'rest_framework.authtoken': для аутентификации через токены
    - 'posts': приложение для работы с постами

    Указана конфигурация базы данных (DATABASES) для использования PostgreSQL с параметрами подключения.

    Добавлены правила проверки паролей (AUTH_PASSWORD_VALIDATORS) для установки требований к паролям пользователей.

    Установлены настройки для REST framework (REST_FRAMEWORK) с использованием TokenAuthentication в качестве метода аутентификации.

6. **URL**:
    В данном коде Django проекта social_network были выполнены следующие действия:

    Создан экземпляр класса DefaultRouter под именем router.

    Зарегистрированы представления PostViewSet, CommentViewSet, LikeViewSet с помощью метода register() для соответствующих эндпоинтов:
    - '/posts/' для работы с постами
    - '/comments/' для работы с комментариями
    - '/likes/' для работы с лайками

   Создан список URL-маршрутов (urlpatterns), который содержит следующие пути:
    - 'admin/' для доступа к административной панели Django
    - 'api/' для включения маршрутов REST API, предоставляемых объектом router
    - 'api-token-auth/' для получения токена аутентификации через представление obtain_auth_token

